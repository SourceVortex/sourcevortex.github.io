{"componentChunkName":"component---src-templates-blog-template-tsx","path":"/2020/09/laravel-dicas/","result":{"data":{"wpPost":{"title":"Laravel dicas","excerpt":"<p>Tópicos IDE Helper Resource controllers Model binding Soft delete IDE Helper Para melhorar a inteligência de código (auto complete) instale o pacote “Laravel IDE Helper”, para isso execute o comando abaixo: composer require –dev barryvdh/laravel-ide-helper Uma vez instalado basta executar os comandos no artisan para configurar a instalação: php artisan ide-helper:generate php artisan ide-helper:models Os […]</p>\n","content":"\n<h3 id=\"tópicos\">Tópicos</h3>\n\n\n\n<ul><li><a href=\"#ide-helper\">IDE Helper</a></li><li><a href=\"#resource-controllers\">Resource controllers</a></li><li><a href=\"#model-binding\">Model binding</a></li><li><a href=\"#soft-delete\">Soft delete</a></li></ul>\n\n\n\n<h4 id=\"ide-helper\"><a href=\"https://sourcevortex.com.br/blog/2020/09/laravel-dicas#ide-helper\"></a>IDE Helper</h4>\n\n\n\n<p>Para melhorar a inteligência de código (auto complete) instale o pacote “Laravel IDE Helper”, para isso execute o comando abaixo:</p>\n\n\n\n<p><code>composer require --dev barryvdh/laravel-ide-helper</code></p>\n\n\n\n<p>Uma vez instalado basta executar os comandos no artisan para configurar a instalação:</p>\n\n\n\n<ul><li><code>php artisan ide-helper:generate</code></li><li><code>php artisan ide-helper:models</code></li></ul>\n\n\n\n<p>Os comandos acima irão gerar dois arquivos na raíz do projeto Laravel, <strong>_ide_helper.php</strong> e <strong>_ide<em>helper</em>models.php</strong>. Estes arquivos são chamados de <strong><em>“stubs”</em></strong>, e possuem códigos que vão auxiliar a inteligência de código do seu editor/IDE.</p>\n\n\n\n<p>Agora quando usar um Model, além de todos os métodos do Eloquent você também deverá ser capaz de localizar os atributos do seu Model na lista de <em>auto complete</em>.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h4 id=\"resource-controllers\"><a href=\"https://sourcevortex.com.br/blog/2020/09/laravel-dicas#resource-controllers\"></a>Resource controllers</h4>\n\n\n\n<p>Ao invés de declarar cinco rotas (ou mais) no arquivo <strong>api.php</strong>/<strong>web.php</strong> para as operações de C.R.U.D. de sua aplicação, é possível declarar apenas uma rota que representa todas essas operações padrões com <strong>Resource Controllers</strong>. Para isso basta executa o comando do artisan abaixo ao criar seu <strong><em>Controller</em></strong>:</p>\n\n\n\n<p><code>php artisan make:controller ProductController -r</code></p>\n\n\n\n<p>Esse comando irá gerar o <strong>controller</strong> com métodos padrões que poderão ser encontrados pela declaração de rota abaixo:</p>\n\n\n\n<div class=\"gatsby-code-title md-code-title\">routes/web.php</div>\n\n\n\n<pre class=\"wp-block-code language-php\"><code>// Laravel <= 7\nRoute::resource('products', 'ProductController');\n\n// Laravel >= 8\nRoute::resource('products', [ProductController::class]);</code></pre>\n\n\n\n<p><br>Caso esteja criando rotas para um API, basta executar o mesmo comando, porém ao invés de usar o parâmetro <code>-r</code>, utilize <code>--api</code>. Isso irá criar o <strong>controller</strong> com alguns métodos a menos que são específicos para SSR. A declaração da rota também muda, ficando assim:</p>\n\n\n\n<div class=\"gatsby-code-title md-code-title\">routes/api.php</div>\n\n\n\n<pre class=\"wp-block-code language-php\"><code>// Laravel <= 7\nRoute::apiResource('products', 'ProductController');\n\n// Laravel >= 8\nRoute::resource('products', [ProductController::class]);</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h4 id=\"model-binding\"><a href=\"https://sourcevortex.com.br/blog/2020/09/laravel-dicas#model-binding\"></a>Model binding</h4>\n\n\n\n<p>Quando criamos uma rotina para exibir dados de um determinado recurso de nossa aplicação, normalmente seguimos o seguinte fluxo:</p>\n\n\n\n<p><strong>Declaração da rota</strong></p>\n\n\n\n<div class=\"gatsby-code-title md-code-title\">routes/web.php</div>\n\n\n\n<pre class=\"wp-block-code language-php\"><code>// ...\nRoute::get('products/{id}', [ProductController::class, 'show']);</code></pre>\n\n\n\n<p><strong>Declaração da rotina</strong></p>\n\n\n\n<div class=\"gatsby-code-title md-code-title\">app/Http/Controllers/ProductController.php</div>\n\n\n\n<pre class=\"wp-block-code language-php\"><code>// ...\npublic function show(int $id)\n{\n    $product = Product::find($id);\n    return view('products', compact('product'));\n    // ...\n}</code></pre>\n\n\n\n<p><br>Porém, com Model binding é possível obter o recurso diretamente pelo ID passado na rota em conjunto com o Providor do Model, desta forma:</p>\n\n\n\n<p><strong>Declaração da rota</strong></p>\n\n\n\n<div class=\"gatsby-code-title md-code-title\">routes/web.php</div>\n\n\n\n<pre class=\"wp-block-code language-php\"><code>// ...\nRoute::get('products/{product}', [ProductController::class, 'show']);</code></pre>\n\n\n\n<p><strong><br>Declaração da rotina</strong></p>\n\n\n\n<div class=\"gatsby-code-title md-code-title\">app/Http/Controllers/ProductController.php</div>\n\n\n\n<pre class=\"wp-block-code language-php\"><code>// ...\npublic function show(Product $product)\n{\n    return view('products', compact('product'));\n}</code></pre>\n\n\n\n<p>OBS: O nome do parâmetro na rota precisa ser exatamente o nome do Model e da variável usada no método do controller.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h4 id=\"soft-delete\"><a href=\"https://sourcevortex.com.br/blog/2020/09/laravel-dicas#soft-delete\"></a>Soft delete</h4>\n\n\n\n<p>Por último, quando trata-se de registros no banco de dados, sabemos o valor que a informação tem, e portanto, não queremos realmente deletar o registro ao invocar a funcionalidade de remoção. Sendo assim, optamos por trocar alguma <strong><em>“flag”</em></strong> ou algo parecido para determinar que o registro “deletado” não de ve ser exibido, preservando o registro em si.</p>\n\n\n\n<p>Para realizar o procedimento de “soft delete” podemos tanto criar uma flag para isso no banco de dados e controlar isso manualmente, ou então usar um recurso do próprio framework, que seria:</p>\n\n\n\n<ul><li>Adicionar o campo de “soft delete” na relação desejada</li></ul>\n\n\n\n<div class=\"gatsby-code-title md-code-title\">database/migrations/create_user_table.php</div>\n\n\n\n<pre class=\"wp-block-code language-php\"><code>// ...\n    public function up()\n    {\n        Schema::table('users', function (Blueprint $table) {\n            $table->id();\n            $table->string('name');\n            $table->softDeletes();\n            // ...\n        });\n    }\n// ...</code></pre>\n\n\n\n<ul><li>Remoção para “lixeira”</li></ul>\n\n\n\n<p>O <strong>softDeletes</strong> adicionado na migration irá criar uma coluna chamada “deleted_at” do tipo “timestamp” (ou similar que represente uma data), uma vez que algum registro tiver essa coluna preenchida com valor, o framework tratará o registro como “deletado”, ou seja, na lixeira.</p>\n\n\n\n<p>Para colocar um registro na lixeira, basta usar o método <code>delete()</code>, exemplo:</p>\n\n\n\n<pre class=\"wp-block-code language-php\"><code>// ...\n  Post::find($id)->delete();\n// ...</code></pre>\n\n\n\n<ul><li>Obtendo registros “deletados”</li></ul>\n\n\n\n<p>Os métodos de obter e listar não trarão registros na lixeira, exceto se for explicitado no query build com o método <code>withTrashed()</code>, exemplo:</p>\n\n\n\n<pre class=\"wp-block-code language-php\"><code>// ...\nPost::withTrashed()->all();\n// ...</code></pre>\n\n\n\n<ul><li>Excluido permanentemente</li></ul>\n\n\n\n<p>Agora, caso precise remover o registro do banco de dados, basta usar o método <code>forceDelete()</code>, exemplo:</p>\n\n\n\n<pre class=\"wp-block-code language-php\"><code>// ...\n  Post::withTrashed()->find($id)->forceDelete();\n// ...</code></pre>\n\n\n\n<p>OBS: Não se esqueça de usar <code>withTrashed()</code>, caso contrário o registro não será encontrado por estar na lixeira.<a href=\"https://sourcevortex.com.br/\"></a></p>\n","date":"2020-09-19T16:00:53","featuredImage":{"node":{"sourceUrl":"http://sourcevortex.admin.dev.com/wp-content/uploads/2020/09/laravel-tricks.png","altText":"","localFile":{"publicURL":"/static/57fd20cee9803ca9b2406688abfd78cc/laravel-tricks.png"}}},"categories":{"nodes":[{"slug":"laravel","name":"Laravel","link":"/category/php/laravel/"},{"slug":"php","name":"PHP","link":"/category/php/"}]}}},"pageContext":{"id":"cG9zdDoxNTc="}}}