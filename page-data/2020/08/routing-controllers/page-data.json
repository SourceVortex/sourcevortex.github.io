{"componentChunkName":"component---src-templates-blog-template-tsx","path":"/2020/08/routing-controllers/","result":{"data":{"wpPost":{"title":"Routing Controllers","excerpt":"<p>Rotas do jeito “tradicional” Normalmente em aplicações construídas com ExpressJS precisamos criar um arquivo (ou arquivos) para definir as rotas, por exemplo: routes/userRouter.js Neste exemplo as rotas de usuários possui um arquivo próprio e se utiliza do userController e seus métodos, e conforme essa aplicação crescer, mais arquivos de rotas e controllers serão criados para cada módulo, […]</p>\n","content":"\n<h3 id=\"rotas-do-jeito-tradicional\">Rotas do jeito “tradicional”</h3>\n\n\n\n<p>Normalmente em aplicações construídas com ExpressJS precisamos criar um arquivo (ou arquivos) para definir as rotas, por exemplo:</p>\n\n\n\n<div class=\"gatsby-code-title md-code-title\">routes/userRouter.js</div>\n\n\n\n<pre class=\"wp-block-code language-javascript\"><code>const express = require('express')\nconst userController = require('../controllers/userController')\n\nconst router = express.Router()\n\nrouter\n  .route('/')\n  .get(userController.getAllUsers)\n  .post(userController.createUser)\n\n// ...</code></pre>\n\n\n\n<p>Neste exemplo as rotas de usuários possui um arquivo próprio e se utiliza do <strong>userController</strong> e seus métodos, e conforme essa aplicação crescer, mais arquivos de rotas e controllers serão criados para cada módulo, ou seja, dois arquivos para cada módulo.</p>\n\n\n\n<p>Porém, um padrão muito utilizado em alguns <strong><em>frameworks</em></strong> é usar apenas o arquivo de <strong><em>controller</em></strong> para definir as rotas, e isso é possível através de <strong><em>annotations</em></strong> ou <strong><em>decorators</em></strong>.</p>\n\n\n\n<h2 id=\"annotationsdecorators\"><a href=\"https://sourcevortex.com.br/blog/2020/08/routing-controllers#annotationsdecorators\"></a>Annotations/Decorators</h2>\n\n\n\n<p>De uma forma geral, esse recurso consiste em adicionar em seu código uma sintaxe que “intercepta” um método ou classe para manipular seu comportamento. Para utilizarmos esse recurso no ExpressJS precisamos usar <strong><em>typescript</em></strong> e habilitar o uso de <strong><em>decorators</em></strong> no arquivo <code>tsconfig.json</code>, desta forma:</p>\n\n\n\n<div class=\"gatsby-code-title md-code-title\">tsconfig.json</div>\n\n\n\n<pre class=\"wp-block-code language-json\"><code>{\n    \"compilerOptions: {\n      // ...\n      \"experimentalDecorators\": true\n      \"emitDecoratorMetadata\": true\n      // ...\n    }\n}</code></pre>\n\n\n\n<p>Além disso vamos precisar instalar uma biblioteca chamada <strong><em>Routing Controllers</em></strong>.</p>\n\n\n\n<h3 id=\"routing-controllers\"><a href=\"https://sourcevortex.com.br/blog/2020/08/routing-controllers#routing-controllers\"></a>Routing Controllers</h3>\n\n\n\n<p>A biblioteca <a href=\"https://github.com/typestack/routing-controllers\">routing controllers</a> permite usarmos diversos <strong><em>decorators</em></strong> já prontos para implementar o sistema de roteamento de nossa aplicação. Não só isso, mas é possível utilizá-la para validações dos objetos enviados nas requisições, mas falaremos disso em um outro momento.</p>\n\n\n\n<p>Enquanto da forma “tradicional” precisávamos de pelo menos dois arquivos por módulo, agora podemos ter apenas um. Seguindo o exemplo anterior, porém usando essa biblioteca nós teríamos algo assim:</p>\n\n\n\n<div class=\"gatsby-code-title md-code-title\">controllers/UserController.ts</div>\n\n\n\n<pre class=\"wp-block-code language-typescript\"><code>import { Request, Response } from 'express'\nimport { JsonController, Post, Get } from 'routing-controllers'\n\n@JsonController('/users')\nexport default class UserController {\n  @Post()\n  public async create() {\n    // ...\n  }\n\n  @Get()\n  public async getAll() {\n    // ...\n  }\n}</code></pre>\n\n\n\n<p>Viu, que simples?! O decorator <strong>@JsonController</strong> usado acima da classe determina o prefixo de todas as rotas do arquivo, enquanto o <strong>@Post</strong> e <strong>@Get</strong> representa os verbos HTTP (podem conter também sufixos caso necessário).</p>\n\n\n\n<p>Caso tenha interesse no processo de configuração e queira um exemplo mais completo, confira <a href=\"https://github.com/sourcevortex/express-template\">esse template</a> onde foi utilizado esse padrão juntamento com MongoDB.</p>\n","date":"2020-08-02T12:10:02","featuredImage":{"node":{"sourceUrl":"http://sourcevortex.admin.dev.com/wp-content/uploads/2020/08/routing-controller.png","altText":"","localFile":{"publicURL":"/static/c046ceae490cfed5458bd178f3ea4dfc/routing-controller.png"}}},"categories":{"nodes":[{"slug":"expressjs","name":"ExpressJS","link":"/category/javascript/nodejs/expressjs/"},{"slug":"nodejs","name":"NodeJS","link":"/category/javascript/nodejs/"},{"slug":"typescript","name":"Typescript","link":"/category/javascript/typescript/"}]}}},"pageContext":{"id":"cG9zdDoxNDI="}}}