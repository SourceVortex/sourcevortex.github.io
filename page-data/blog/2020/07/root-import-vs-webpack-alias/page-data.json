{"componentChunkName":"component---src-templates-blog-template-tsx","path":"/blog/2020/07/root-import-vs-webpack-alias/","result":{"data":{"wpPost":{"title":"Root import VS Webpack alias","excerpt":"<p>O que é Root import? Image um cenário onde você precise importar um componente ou algum método mas o mesmo se encontra em um nível de diretório distante do arquivo atual. Você precisaria fazer algo semelhante a isso: src/pages/Home.js Veja que foi necessário retornar três diretórios até encontrar o arquivo necessário, e isso pode variar […]</p>\n","content":"\n<h3>O que é Root import?</h3>\n\n\n\n<p>Image um cenário onde você precise importar um componente ou algum método mas o mesmo se encontra em um nível de diretório distante do arquivo atual. Você precisaria fazer algo semelhante a isso:</p>\n\n\n\n<div class=\"gatsby-code-title md-code-title\">src/pages/Home.js</div>\n\n\n\n<pre class=\"wp-block-code language-javascript\"><code>import Foo from '../../../Foo'</code></pre>\n\n\n\n<p>Veja que foi necessário retornar três diretórios até encontrar o arquivo necessário, e isso pode variar para mais ou para menos dependendo da localização do arquivo atual.</p>\n\n\n\n<p>O <strong>root import</strong> permite você configurar seu projeto para trabalhar a partir de um único caminho relativo, que é configurado utilizando a biblioteca <a href=\"https://www.npmjs.com/package/babel-plugin-root-import\">babel-plugin-root-import</a>. Uma vez configurado você pode deixar de retornar diretórios e importá-los através do simbolo configurado, por exemplo, ao invés de usar da maneira citada anteriormente, teríamos isso:</p>\n\n\n\n<div class=\"gatsby-code-title md-code-title\">src/pages/Home.js</div>\n\n\n\n<pre class=\"wp-block-code language-javascript\"><code>import Foo from '~/components/Foo'</code></pre>\n\n\n\n<p>Bem melhor, não? Mas, essa não é a única alternativa para solucionar esse “problema”.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Webpack alias</h3>\n\n\n\n<p>Antes de falar sobre o <strong><em>webpack alias</em></strong>, vamos falar do <strong><em>webpack</em></strong> em si.</p>\n\n\n\n<p>O <a href=\"https://webpack.js.org/\">webpack</a> é o empacotador utilizado por padrão no ReactJS, farei um post em breve explicando mais sobre ele, seu funcionamento e como construir um do zero, mas por hora saiba que ao criar um projeto com o comando <code>create-react-app</code> o webpack é inserido em seu projeto internamente.</p>\n\n\n\n<p>Contudo, não é possível modificar as configurações do <strong><em>webpack</em></strong> “nativamente”, para isso você pode ejetar sua aplicação (falarei disso em breve também), ou então instalar a biblioteca <a href=\"https://www.npmjs.com/package/@craco/craco\">Craco</a> que irá permitir modificar o <strong><em>webpack</em></strong> sem que você precise ejetar seu projeto.</p>\n\n\n\n<p>Então vamos lá, mãos na massa! Tudo o que você precisa fazer é instalar a biblioteca citada acima e então configurá-la da seguinte maneira:</p>\n\n\n\n<div class=\"gatsby-code-title md-code-title\">craco.config.js</div>\n\n\n\n<pre class=\"wp-block-code language-javascript\"><code>const path = require('path')\n\nmodule.exports = {\n  webpack: {\n    alias: {\n      '@Root': path.resolve(__dirname, 'src/'),\n      '@Page': path.resolve(__dirname, 'src/pages/'),\n      '@Component': path.resolve(__dirname, 'src/_components/'),\n    },\n  },\n}</code></pre>\n\n\n\n<p></p>\n\n\n\n<p>Pronto, agora para importar um componente seguindo o primeiro exemplo, basta fazer assim:</p>\n\n\n\n<div class=\"gatsby-code-title md-code-title\">src/pages/Home.js</div>\n\n\n\n<pre class=\"wp-block-code language-javascript\"><code>import Foo from '@Component/Foo'</code></pre>\n\n\n\n<p></p>\n\n\n\n<p>Ah, e para seu editor reconhecer essa nova forma de importação e fornecer o autocomplete, basta seguir os passos abaixo:</p>\n\n\n\n<p>Criar ou acrescentar no arquivo <code>jsconfig.json</code>(ou caso use Typescript <code>tsconfig.json</code>) na raíz do projeto com o seguinte conteúdo:</p>\n\n\n\n<div class=\"gatsby-code-title md-code-title\">jsconfig.json</div>\n\n\n\n<pre class=\"wp-block-code language-json\"><code>{\n  \"compilerOptions\": {\n    // ...\n    \"baseUrl\": \"./src/\",\n    \"paths\": {\n      \"@Root/*\": [\"*\"],\n      \"@Page/*\": [\"pages/*\"],\n      \"@Component/*\": [\"_components/*\"]\n    }\n    // ...\n  }\n}</code></pre>\n\n\n\n<p>Você pode criar quantos <strong><em>aliases</em></strong> quiser, dando nomes específicos que lhe ajudem identificar a origem da importação.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><strong>OBS:</strong> É possível usar a biblioteca <strong><em>babel-plugin-root-import</em></strong> de forma semelhante ao <strong><em>webpack alias</em></strong>, dando nome para cada “atalho”, para isso basta seguir <a href=\"https://www.npmjs.com/package/babel-plugin-root-import#config\">estas instruções</a>.</p><p></p></blockquote>\n","date":"2020-07-25T23:20:11","featuredImage":{"node":{"sourceUrl":"http://sourcevortex.admin.dev.com/wp-content/uploads/2020/07/root_x_alias.png","altText":"","localFile":{"publicURL":"/static/1fda3d8317eb09ebd5bacac50afa248b/root_x_alias.png"}}},"categories":{"nodes":[{"slug":"javascript","name":"Javascript","link":"/category/javascript/"},{"slug":"reactjs","name":"ReactJS","link":"/category/javascript/reactjs/"}]}}},"pageContext":{"id":"cG9zdDo5Nw=="}}}