{"componentChunkName":"component---src-templates-blog-template-tsx","path":"/blog/2020/07/root-import-vs-webpack-alias","result":{"data":{"markdownRemark":{"html":"<h3>O que é Root import?</h3>\n<p>Image um cenário onde você precise importar um componente ou algum método mas o mesmo se encontra em um nível de diretório distante do arquivo atual. Você precisaria fazer algo semelhante a isso:</p>\n<div class=\"gatsby-code-title md-code-title\">src/pages/Home.js</div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> Foo <span class=\"token keyword\">from</span> <span class=\"token string\">'../../../Foo'</span></code></pre></div>\n<p>Veja que foi necessário retornar três diretórios até encontrar o arquivo necessário, e isso pode variar para mais ou para menos dependendo da localização do arquivo atual.</p>\n<p>O <strong>root import</strong> permite você configurar seu projeto para trabalhar a partir de um único caminho relativo, que é configurado utilizando a biblioteca <a href=\"https://www.npmjs.com/package/babel-plugin-root-import\">babel-plugin-root-import</a>. Uma vez configurado você pode deixar de retornar diretórios e importá-los através do simbolo configurado, por exemplo, ao invés de usar da maneira citada anteriormente, teríamos isso:</p>\n<div class=\"gatsby-code-title md-code-title\">src/pages/Home.js</div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> Foo <span class=\"token keyword\">from</span> <span class=\"token string\">'~/components/Foo'</span></code></pre></div>\n<p>Bem melhor, não? Mas, essa não é a única alternativa para solucionar esse \"problema\".</p>\n<hr>\n<h3>Webpack alias</h3>\n<p>Antes de falar sobre o <strong><em>webpack alias</em></strong>, vamos falar do <strong><em>webpack</em></strong> em si.</p>\n<p>O <a href=\"https://webpack.js.org/\">webpack</a> é o empacotador utilizado por padrão no ReactJS, farei um post em breve explicando mais sobre ele, seu funcionamento e como construir um do zero, mas por hora saiba que ao criar um projeto com o comando <code class=\"language-text\">create-react-app</code> o webpack é inserido em seu projeto internamente.</p>\n<p>Contudo, não é possível modificar as configurações do <strong><em>webpack</em></strong> \"nativamente\", para isso você pode ejetar sua aplicação (falarei disso em breve também), ou então instalar a biblioteca <a href=\"https://www.npmjs.com/package/@craco/craco\">Craco</a> que irá permitir modificar o <strong><em>webpack</em></strong> sem que você precise ejetar seu projeto.</p>\n<p>Então vamos lá, mãos na massa! Tudo o que você precisa fazer é instalar a biblioteca citada acima e então configurá-la da seguinte maneira:</p>\n<div class=\"gatsby-code-title md-code-title\">craco.config.js</div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  webpack<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    alias<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'@Root'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'@Page'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/pages/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'@Component'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/_components/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Pronto, agora para importar um componente seguindo o primeiro exemplo, basta fazer assim:</p>\n<div class=\"gatsby-code-title md-code-title\">src/pages/Home.js</div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> Foo <span class=\"token keyword\">from</span> <span class=\"token string\">'@Component/Foo'</span></code></pre></div>\n<p>Ah, e para seu editor reconhecer essa nova forma de importação e fornecer o autocomplete, basta seguir os passos abaixo:</p>\n<p>Criar ou acrescentar no arquivo <code class=\"language-text\">jsconfig.json</code> (ou caso use Typescript <code class=\"language-text\">tsconfig.json</code>) na raíz do projeto com o seguinte conteúdo:</p>\n<div class=\"gatsby-code-title md-code-title\">jsconfig.json</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"@Root/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"@Page/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"pages/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"@Component/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"_components/*\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Você pode criar quantos <strong><em>aliases</em></strong> quiser, dando nomes específicos que lhe ajudem identificar a origem da importação.</p>\n<blockquote>\n<p><strong>OBS:</strong> É possível usar a biblioteca <strong><em>babel-plugin-root-import</em></strong> de forma semelhante ao <strong><em>webpack alias</em></strong>, dando nome para cada \"atalho\", para isso basta seguir <a href=\"https://www.npmjs.com/package/babel-plugin-root-import#config\">estas instruções</a>.</p>\n</blockquote>","frontmatter":{"file":"/blob/master/_posts/2020/07/root-import-vs-webpack-alias.md","date":"2020-07-25 23:20:00","slug":"/blog/2020/07/root-import-vs-webpack-alias","title":"Root import VS Webpack alias","image":"2020/07/root_x_alias.png","imageAlt":"Root import VS Webpack alias image","tags":["ReactJS","Javascript","Webpack"],"badgeColors":["black","black","black"],"badgeBackgrounds":["#4cdafe","#f7df1e","#1c78c0"]}}},"pageContext":{"slug":"/blog/2020/07/root-import-vs-webpack-alias"}}}