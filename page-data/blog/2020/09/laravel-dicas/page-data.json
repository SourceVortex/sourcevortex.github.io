{"componentChunkName":"component---src-templates-blog-template-tsx","path":"/blog/2020/09/laravel-dicas","result":{"data":{"markdownRemark":{"html":"<h3 id=\"tópicos\" style=\"position:relative;\"><a href=\"#t%C3%B3picos\" aria-label=\"tópicos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tópicos</h3>\n<ul>\n<li><a href=\"#ide-helper\">IDE Helper</a></li>\n<li><a href=\"#resource-controllers\">Resource controllers</a></li>\n<li><a href=\"#model-binding\">Model binding</a></li>\n<li><a href=\"#soft-delete\">Soft delete</a></li>\n</ul>\n<h4 id=\"ide-helper\" style=\"position:relative;\"><a href=\"#ide-helper\" aria-label=\"ide helper permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IDE Helper</h4>\n<p>Para melhorar a inteligência de código (auto complete) instale o pacote \"Laravel IDE Helper\", para isso execute o comando abaixo:</p>\n<p><code class=\"language-text\">composer require --dev barryvdh/laravel-ide-helper</code></p>\n<p>Uma vez instalado basta executar os comandos no artisan para configurar a instalação:</p>\n<ul>\n<li><code class=\"language-text\">php artisan ide-helper:generate</code></li>\n<li><code class=\"language-text\">php artisan ide-helper:models</code></li>\n</ul>\n<p>Os comandos acima irão gerar dois arquivos na raíz do projeto Laravel, <strong>_ide_helper.php</strong> e <strong>_ide<em>helper</em>models.php</strong>. Estes arquivos são chamados de <strong><em>\"stubs\"</em></strong>, e possuem códigos que vão auxiliar a inteligência de código do seu editor/IDE.</p>\n<p>Agora quando usar um Model, além de todos os métodos do Eloquent você também deverá ser capaz de localizar os atributos do seu Model na lista de <em>auto complete</em>.</p>\n<hr>\n<h4 id=\"resource-controllers\" style=\"position:relative;\"><a href=\"#resource-controllers\" aria-label=\"resource controllers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resource controllers</h4>\n<p>Ao invés de declarar cinco rotas (ou mais) no arquivo <strong>api.php</strong>/<strong>web.php</strong> para as operações de C.R.U.D. de sua aplicação, é possível declarar apenas uma rota que representa todas essas operações padrões com <strong>Resource Controllers</strong>. Para isso basta executa o comando do artisan abaixo ao criar seu <strong><em>Controller</em></strong>:</p>\n<p><code class=\"language-text\">php artisan make:controller ProductController -r</code></p>\n<p>Esse comando irá gerar o <strong>controller</strong> com métodos padrões que poderão ser encontrados pela declaração de rota abaixo:</p>\n<div class=\"gatsby-code-title md-code-title\">routes/web.php</div>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// Laravel &lt;= 7</span>\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'products'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'ProductController'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Laravel >= 8</span>\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'products'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>ProductController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<br>\n<p>Caso esteja criando rotas para um API, basta executar o mesmo comando, porém ao invés de usar o parâmetro <code class=\"language-text\">-r</code>, utilize <code class=\"language-text\">--api</code>. Isso irá criar o <strong>controller</strong> com alguns métodos a menos que são específicos para SSR. A declaração da rota também muda, ficando assim:</p>\n<div class=\"gatsby-code-title md-code-title\">routes/api.php</div>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// Laravel &lt;= 7</span>\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">apiResource</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'products'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'ProductController'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Laravel >= 8</span>\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'products'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>ProductController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<hr>\n<h4 id=\"model-binding\" style=\"position:relative;\"><a href=\"#model-binding\" aria-label=\"model binding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Model binding</h4>\n<p>Quando criamos uma rotina para exibir dados de um determinado recurso de nossa aplicação, normalmente seguimos o seguinte fluxo:</p>\n<p><strong>Declaração da rota</strong></p>\n<div class=\"gatsby-code-title md-code-title\">routes/web.php</div>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// ...</span>\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'products/{id}'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>ProductController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'show'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<br>\n<p><strong>Declaração da rotina</strong></p>\n<div class=\"gatsby-code-title md-code-title\">app/Http/Controllers/ProductController.php</div>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>int <span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$product</span> <span class=\"token operator\">=</span> Product<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'products'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">compact</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'product'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<br>\n<p>Porém, com Model binding é possível obter o recurso diretamente pelo ID passado na rota em conjunto com o Providor do Model, desta forma:</p>\n<p><strong>Declaração da rota</strong></p>\n<div class=\"gatsby-code-title md-code-title\">routes/web.php</div>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// ...</span>\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'products/{product}'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>ProductController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'show'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<br>\n<p><strong>Declaração da rotina</strong></p>\n<div class=\"gatsby-code-title md-code-title\">app/Http/Controllers/ProductController.php</div>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>Product <span class=\"token variable\">$product</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'products'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">compact</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'product'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>OBS: O nome do parâmetro na rota precisa ser exatamente o nome do Model e da variável usada no método do controller.</p>\n<hr>\n<h4 id=\"soft-delete\" style=\"position:relative;\"><a href=\"#soft-delete\" aria-label=\"soft delete permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Soft delete</h4>\n<p>Por último, quando trata-se de registros no banco de dados, sabemos o valor que a informação tem, e portanto, não queremos realmente deletar o registro ao invocar a funcionalidade de remoção. Sendo assim, optamos por trocar alguma <strong><em>\"flag\"</em></strong> ou algo parecido para determinar que o registro \"deletado\" não de ve ser exibido, preservando o registro em si.</p>\n<p>Para realizar o procedimento de \"soft delete\" podemos tanto criar uma flag para isso no banco de dados e controlar isso manualmente, ou então usar um recurso do próprio framework, que seria:</p>\n<ul>\n<li>Adicionar o campo de \"soft delete\" na relação desejada</li>\n</ul>\n<div class=\"gatsby-code-title md-code-title\">database/migrations/create_user_table.php</div>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">up</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Schema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Blueprint <span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">softDeletes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// ...</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ...</span></span></code></pre></div>\n<br>\n<ul>\n<li>Remoção para \"lixeira\"</li>\n</ul>\n<p>O <strong>softDeletes</strong> adicionado na migration irá criar uma coluna chamada \"deleted_at\" do tipo \"timestamp\" (ou similar que represente uma data), uma vez que algum registro tiver essa coluna preenchida com valor, o framework tratará o registro como \"deletado\", ou seja, na lixeira.</p>\n<p>Para colocar um registro na lixeira, basta usar o método <code class=\"language-text\">delete()</code>, exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// ...</span>\n  Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span></span></code></pre></div>\n<br>\n<ul>\n<li>Obtendo registros \"deletados\"</li>\n</ul>\n<p>Os métodos de obter e listar não trarão registros na lixeira, exceto se for explicitado no query build com o método <code class=\"language-text\">withTrashed()</code>, exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n  <span class=\"token comment\">// ...</span>\n  Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">withTrashed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span></span></code></pre></div>\n<br>\n<ul>\n<li>Excluido permanentemente</li>\n</ul>\n<p>Agora, caso precise remover o registro do banco de dados, basta usar o método <code class=\"language-text\">forceDelete()</code>, exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// ...</span>\n  Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">withTrashed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">forceDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span></span></code></pre></div>\n<p>OBS: Não se esqueça de usar <code class=\"language-text\">withTrashed()</code>, caso contrário o registro não será encontrado por estar na lixeira.</p>","frontmatter":{"file":"/blob/master/content/posts/2020/09/laravel-dicas.md","date":"2020-09-07 12:10:00","slug":"/blog/2020/09/laravel-dicas","title":"Laravel dicas","excerpt":"Veja recursos para tornar o desenvolvimento com Laravel mais fácil e produtivo!","image":"2020/09/laravel-tricks.png","imageAlt":"ElectronJS template image","tags":["Laravel","PHP"],"badgeColors":["white","black"],"badgeBackgrounds":["#ff2d20","#efd81d"]}}},"pageContext":{"slug":"/blog/2020/09/laravel-dicas"}}}